import cv2 
import numpy as np
import math

# final_string = 'A+A[-A+]+A'

# final_string = 'BBBBBBBB-[[BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBBBBBB[+BBBBBBBBBBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A'
final_string = 'BBBBBBBBBBBBBBBB-[[BBBBBBBB-[[BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBBBBBB[+BBBBBBBBBBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBBBBBB-[[BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBBBBBB[+BBBBBBBBBBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBBBBBBBBBBBBBB[+BBBBBBBBBBBBBBBBBBBBBBBB-[[BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBBBBBB[+BBBBBBBBBBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BBBBBBBB-[[BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBBBBBB[+BBBBBBBBBBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BBBB-[[BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]+BBBB[+BBBBBB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A]-BB-[[B-[[A]+A]+B[+BA]-A]+B-[[A]+A]+B[+BA]-A]+BB[+BBB-[[A]+A]+B[+BA]-A]-B-[[A]+A]+B[+BA]-A'
length = 10.0
img = np.zeros((1000,1000), np.uint8)
position = (500, 0) # (cols, rows): (0,0) is at top-left
heading = math.radians(90) # init heading going directly down
turn_left = math.radians(25)
turn_right = math.radians(-25)
stack = []

for item in final_string:
	if item == 'A' or item == 'B':
		x_new = int(position[0]+length*math.cos(heading))
		y_new = int(position[1]+length*math.sin(heading))
		new_position = ( x_new, y_new )
		cv2.line(img,position,new_position,255,1)
		position = new_position
		print '[ FRWD ] ', position
	elif item == '+':
		heading = heading + turn_right
		print '[ RGHT ] ', math.degrees(turn_right)
	elif item == '-':
		heading = heading + turn_left
		print '[ LEFT ] ', math.degrees(turn_left)
	elif item == '[':
		stack.append((position, heading))
		print '[ APPEND ]', stack
	elif item == ']':
		print '[ POP STACK ]', stack
		position, heading = stack.pop(len(stack)-1)
		print '[ POP  ] ', position, heading
	else:
		print '[ NOP  ] ', codebit

cv2.imshow('Channels', img)
cv2.waitKey(0)